
<html lang="en">
<head>
    <!-- Angular Material style sheet -->
    <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/angular_material/1.0.0/angular-material.min.css">
</head>
<body ng-app="BlankApp" ng-cloak>
    <!--
      Your HTML content here
    -->
    <!-- Angular Material requires Angular.js Libraries -->
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-animate.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-aria.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-messages.min.js"></script>

    <!-- Angular Material Library -->
    <script src="http://ajax.googleapis.com/ajax/libs/angular_material/1.0.0/angular-material.min.js"></script>

    <!-- Your application bootstrap  -->
    <script type="text/javascript">
        (function () {
            'use strict';
            angular
              .module('virtualRepeatDeferredLoadingDemo', ['ngMaterial'])
              .controller('AppCtrl', function ($timeout) {
                  // In this example, we set up our model using a class.
                  // Using a plain object works too. All that matters
                  // is that we implement getItemAtIndex and getLength.
                  var DynamicItems = function () {
                      /**
                       * @type {!Object<?Array>} Data pages, keyed by page number (0-index).
                       */
                      this.loadedPages = {};
                      /** @type {number} Total number of items. */
                      this.numItems = 0;
                      /** @const {number} Number of items to fetch per request. */
                      this.PAGE_SIZE = 50;
                      this.fetchNumItems_();
                  };
                  // Required.
                  DynamicItems.prototype.getItemAtIndex = function (index) {
                      var pageNumber = Math.floor(index / this.PAGE_SIZE);
                      var page = this.loadedPages[pageNumber];
                      if (page) {
                          return page[index % this.PAGE_SIZE];
                      } else if (page !== null) {
                          this.fetchPage_(pageNumber);
                      }
                  };
                  // Required.
                  DynamicItems.prototype.getLength = function () {
                      return this.numItems;
                  };
                  DynamicItems.prototype.fetchPage_ = function (pageNumber) {
                      // Set the page to null so we know it is already being fetched.
                      this.loadedPages[pageNumber] = null;
                      // For demo purposes, we simulate loading more items with a timed
                      // promise. In real code, this function would likely contain an
                      // $http request.
                      $timeout(angular.noop, 300).then(angular.bind(this, function () {
                          this.loadedPages[pageNumber] = [];
                          var pageOffset = pageNumber * this.PAGE_SIZE;
                          for (var i = pageOffset; i < pageOffset + this.PAGE_SIZE; i++) {
                              this.loadedPages[pageNumber].push(i);
                          }
                      }));
                  };
                  DynamicItems.prototype.fetchNumItems_ = function () {
                      // For demo purposes, we simulate loading the item count with a timed
                      // promise. In real code, this function would likely contain an
                      // $http request.
                      $timeout(angular.noop, 300).then(angular.bind(this, function () {
                          this.numItems = 50000;
                      }));
                  };
                  this.dynamicItems = new DynamicItems();
              });
        })();

    </script>



    <div ng-controller="AppCtrl as ctrl" ng-cloak>
        <md-content layout="column">
            <p>
                Display a list of 50,000 items that load on demand in a viewport of only 7 rows (height=40px).
                <br /><br />
                This demo shows scroll and rendering performance gains when using <code>md-virtual-repeat</code>;
                achieved with the dynamic reuse of rows visible in the viewport area. Developers are required to
                explicitly use <code>md-virtual-repeat-container</code> as a wrapping parent container.
                <br /><br />
                To enable load-on-demand behavior, developers must pass in a custom instance of
                mdVirtualRepeatModel (see the example's source for more info).
            </p>
            <md-virtual-repeat-container id="vertical-container">
                <div md-virtual-repeat="item in ctrl.dynamicItems" md-on-demand
                     class="repeated-item" flex>
                    {{item}}
                </div>
            </md-virtual-repeat-container>
        </md-content>
    </div>

</body>
</html>